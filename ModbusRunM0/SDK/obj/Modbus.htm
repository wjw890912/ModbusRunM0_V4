<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\Modbus.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\Modbus.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 728]: Last Updated: Sat Jun 16 14:56:03 2018
<BR><P>
<H3>Maximum Stack Usage =        188 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1ac230c]">eBTFuncReadHoldingRegister</a>
 <LI><a href="#[1ac02f0]">eMBFuncReportSlaveID</a>
 <LI><a href="#[1ac0b9c]">eMBFuncReadInputRegister</a>
 <LI><a href="#[1ac0fd4]">eMBFuncReadHoldingRegister</a>
 <LI><a href="#[1ac0f20]">eMBFuncWriteMultipleHoldingRegister</a>
 <LI><a href="#[1ac0f5c]">eMBFuncWriteHoldingRegister</a>
 <LI><a href="#[1ac0f98]">eMBFuncReadWriteMultipleHoldingRegister</a>
 <LI><a href="#[1ac1c7c]">eMBFuncReadCoils</a>
 <LI><a href="#[1ac1c40]">eMBFuncWriteCoil</a>
 <LI><a href="#[1ac1c04]">eMBFuncWriteMultipleCoils</a>
 <LI><a href="#[1ac1790]">eMBFuncReadDiscreteInputs</a>
 <LI><a href="#[27d3244]">Reset_Handler</a>
 <LI><a href="#[27d3208]">NMI_Handler</a>
 <LI><a href="#[27d31cc]">HardFault_Handler</a>
 <LI><a href="#[27d3190]">SVC_Handler</a>
 <LI><a href="#[27d3154]">PendSV_Handler</a>
 <LI><a href="#[1aca124]">SysTick_Handler</a>
 <LI><a href="#[27d3028]">BOD_IRQHandler</a>
 <LI><a href="#[27d2bb4]">WDT_IRQHandler</a>
 <LI><a href="#[27d2fec]">EINT0_IRQHandler</a>
 <LI><a href="#[27d2fb0]">EINT1_IRQHandler</a>
 <LI><a href="#[27d2f74]">GPIOP0P1_IRQHandler</a>
 <LI><a href="#[27d2f38]">GPIOP2P3P4_IRQHandler</a>
 <LI><a href="#[27d2e84]">PWMA_IRQHandler</a>
 <LI><a href="#[27d2e48]">PWMB_IRQHandler</a>
 <LI><a href="#[27d2d1c]">TMR0_IRQHandler</a>
 <LI><a href="#[1ac5ffc]">TMR1_IRQHandler</a>
 <LI><a href="#[27cef78]">TMR2_IRQHandler</a>
 <LI><a href="#[27d2c68]">TMR3_IRQHandler</a>
 <LI><a href="#[1ac75c8]">UART0_IRQHandler</a>
 <LI><a href="#[27cef3c]">UART1_IRQHandler</a>
 <LI><a href="#[27d2d94]">SPI0_IRQHandler</a>
 <LI><a href="#[27d2d58]">SPI1_IRQHandler</a>
 <LI><a href="#[27d33e8]">Default_Handler</a>
 <LI><a href="#[27d33e8]">Default_Handler</a>
 <LI><a href="#[27d2efc]">I2C0_IRQHandler</a>
 <LI><a href="#[2853874]">I2C1_IRQHandler</a>
 <LI><a href="#[27d33e8]">Default_Handler</a>
 <LI><a href="#[27d33e8]">Default_Handler</a>
 <LI><a href="#[27d33e8]">Default_Handler</a>
 <LI><a href="#[27d33e8]">Default_Handler</a>
 <LI><a href="#[27d33e8]">Default_Handler</a>
 <LI><a href="#[27d30dc]">ACMP01_IRQHandler</a>
 <LI><a href="#[27d30a0]">ACMP23_IRQHandler</a>
 <LI><a href="#[27d33e8]">Default_Handler</a>
 <LI><a href="#[27d2e0c]">PWRWU_IRQHandler</a>
 <LI><a href="#[27d3064]">ADC_IRQHandler</a>
 <LI><a href="#[27d33e8]">Default_Handler</a>
 <LI><a href="#[27d2dd0]">RTC_IRQHandler</a>
 <LI><a href="#[1aca0ac]">main</a>
 <LI><a href="#[27d32bc]">SystemInit</a>
 <LI><a href="#[285082c]">__main</a>
 <LI><a href="#[1ac2bb8]">eMBRTUStart</a>
 <LI><a href="#[1ac2b7c]">eMBRTUStop</a>
 <LI><a href="#[1ac2bf4]">eMBRTUSend</a>
 <LI><a href="#[1ac2c30]">eMBRTUReceive</a>
 <LI><a href="#[1ac2b04]">xMBRTUReceiveFSM</a>
 <LI><a href="#[1ac2a8c]">xMBRTUTransmitFSM</a>
 <LI><a href="#[1ac2ac8]">xMBRTUTimerT35Expired</a>
 <LI><a href="#[1ac230c]">eBTFuncReadHoldingRegister</a>
 <LI><a href="#[1ac02f0]">eMBFuncReportSlaveID</a>
 <LI><a href="#[1ac0b9c]">eMBFuncReadInputRegister</a>
 <LI><a href="#[1ac0fd4]">eMBFuncReadHoldingRegister</a>
 <LI><a href="#[1ac0f20]">eMBFuncWriteMultipleHoldingRegister</a>
 <LI><a href="#[1ac0f5c]">eMBFuncWriteHoldingRegister</a>
 <LI><a href="#[1ac0f98]">eMBFuncReadWriteMultipleHoldingRegister</a>
 <LI><a href="#[1ac1c7c]">eMBFuncReadCoils</a>
 <LI><a href="#[1ac1c40]">eMBFuncWriteCoil</a>
 <LI><a href="#[1ac1c04]">eMBFuncWriteMultipleCoils</a>
 <LI><a href="#[1ac1790]">eMBFuncReadDiscreteInputs</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[285082c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(.text)
</UL>
<P><STRONG><a name="[284f008]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[284eedc]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[284e900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[284eea0]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[284e900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[284edb0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[27d3244]"></a>Reset_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, startup_m051series.o(.text))

<P><STRONG><a name="[27d3208]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d31cc]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d3190]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d3154]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d30dc]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d30a0]"></a>ACMP23_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d3064]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d3028]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d2fec]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d2fb0]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d2f74]"></a>GPIOP0P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d2f38]"></a>GPIOP2P3P4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d2efc]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d2e84]"></a>PWMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d2e48]"></a>PWMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d2e0c]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d2dd0]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d2d94]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d2d58]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d2d1c]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d2c68]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d2bb4]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[285055c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2850520]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac2c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[1ac5f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[1ac9e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[1ac9e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[27d2380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[27d4810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>

<P><STRONG><a name="[2850430]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac02f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReportSlaveID
<LI><a href="#[1ac2b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
<LI><a href="#[2850a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiReciveEventPoll
</UL>

<P><STRONG><a name="[28503f4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27d62c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>

<P><STRONG><a name="[28503b8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[28502c8]"></a>strstr</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2850a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiReciveEventPoll
</UL>

<P><STRONG><a name="[2850958]"></a>__aeabi_fdiv</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[284f620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[28509d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_Weight
</UL>

<P><STRONG><a name="[2853694]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[284f440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[28509d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_Weight
</UL>

<P><STRONG><a name="[2850994]"></a>__aeabi_f2iz</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28509d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_Weight
</UL>

<P><STRONG><a name="[284ecc0]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[284f620]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2850958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[284f440]"></a>_float_epilogue</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2853694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[284e900]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[284eea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[284eedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[284e8c4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[284e144]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[284e108]"></a>__decompress1</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1ac7460]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[1ac74d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[27ceec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[1ac7424]"></a>CLK_SetModuleClock</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, clk.o(i.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac74d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[27ceec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[1aca070]"></a>CLK_WaitClockReady</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk.o(i.CLK_WaitClockReady))
<BR><BR>[Called By]<UL><LI><a href="#[1aca160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[2850bec]"></a>CleanWeight</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, esp8266_wifi.o(i.CleanWeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CleanWeight &rArr; ReadADCHX711
</UL>
<BR>[Calls]<UL><LI><a href="#[2850b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADCHX711
</UL>
<BR>[Called By]<UL><LI><a href="#[2850afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataWeight
</UL>

<P><STRONG><a name="[2850bb0]"></a>ConfigHWADCHX711</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, esp8266_wifi.o(i.ConfigHWADCHX711))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ConfigHWADCHX711 &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1aca1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Delay
<LI><a href="#[2767704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[2850b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADCHX711
</UL>
<BR>[Called By]<UL><LI><a href="#[27ced98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiInit
</UL>

<P><STRONG><a name="[1aca1d8]"></a>DrvSYS_Delay</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(i.DrvSYS_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[1ac9da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiMain
<LI><a href="#[27ced98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiInit
<LI><a href="#[2850a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiSentEventPoll
<LI><a href="#[2850a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiReciveEventPoll
<LI><a href="#[2850bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigHWADCHX711
</UL>

<P><STRONG><a name="[1ac9710]"></a>EnterCriticalSection</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, port.o(i.EnterCriticalSection))
<BR><BR>[Called By]<UL><LI><a href="#[1ac2b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
<LI><a href="#[1ac2b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[1ac2bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[1ac2bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[1ac2c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
<LI><a href="#[1ac2c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[1ac74d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[27ceec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[1ac96d4]"></a>ExitCriticalSection</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, port.o(i.ExitCriticalSection))
<BR><BR>[Called By]<UL><LI><a href="#[1ac2b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
<LI><a href="#[1ac2b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[1ac2bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[1ac2bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[1ac2c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
<LI><a href="#[1ac2c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[1ac74d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[27ceec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[1ac9ff8]"></a>FMC_Close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(i.FMC_Close))
<BR><BR>[Called By]<UL><LI><a href="#[1aca0ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ac9fbc]"></a>FMC_Open</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(i.FMC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[1aca0ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2767704]"></a>GPIO_SetMode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio.o(i.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac9f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWRealyInit
<LI><a href="#[1ac9f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHwAddrIint
<LI><a href="#[2850bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigHWADCHX711
</UL>

<P><STRONG><a name="[1ac9f80]"></a>GetHwAddrIint</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, realyctrl.o(i.GetHwAddrIint))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetHwAddrIint &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2767704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1aca0ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ac9f44]"></a>HWRealyInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, realyctrl.o(i.HWRealyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HWRealyInit &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2767704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1aca0ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2853874]"></a>I2C1_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, blux_v30b.o(i.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2765904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearTimeoutFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[2765904]"></a>I2C_ClearTimeoutFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(i.I2C_ClearTimeoutFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2853874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[1ac9f08]"></a>KeyPool</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, realyctrl.o(i.KeyPool))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = KeyPool
</UL>
<BR>[Calls]<UL><LI><a href="#[27d0d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyRead
<LI><a href="#[27d0d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProc
</UL>
<BR>[Called By]<UL><LI><a href="#[1aca0ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27d0d78]"></a>KeyProc</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, realyctrl.o(i.KeyProc))
<BR><BR>[Called By]<UL><LI><a href="#[1ac9f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPool
</UL>

<P><STRONG><a name="[27d0d3c]"></a>KeyRead</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, realyctrl.o(i.KeyRead))
<BR><BR>[Called By]<UL><LI><a href="#[1ac9f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPool
</UL>

<P><STRONG><a name="[2850b74]"></a>ReadADCHX711</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, esp8266_wifi.o(i.ReadADCHX711))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ReadADCHX711
</UL>
<BR>[Calls]<UL><LI><a href="#[2850a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayp
</UL>
<BR>[Called By]<UL><LI><a href="#[28509d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_Weight
<LI><a href="#[2850bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigHWADCHX711
<LI><a href="#[2850bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanWeight
</UL>

<P><STRONG><a name="[27d0d00]"></a>RealyCtrl</STRONG> (Thumb, 314 bytes, Stack size 4 bytes, realyctrl.o(i.RealyCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RealyCtrl &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[276e004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac9ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealyPoll
</UL>

<P><STRONG><a name="[1ac9ecc]"></a>RealyPoll</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, realyctrl.o(i.RealyPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RealyPoll &rArr; RealyCtrl &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[27d0d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealyCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1aca0ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1aca160]"></a>SYS_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, main.o(i.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SYS_Init &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac9e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1aca070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[1aca0ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ac9e90]"></a>SYS_ResetModule</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sys.o(i.SYS_ResetModule))
<BR><BR>[Called By]<UL><LI><a href="#[1ac74d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[27ceec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[2850b38]"></a>SendData2Sever</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, esp8266_wifi.o(i.SendData2Sever))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SendData2Sever &rArr; rt_thread_entry_Weight &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[27d4234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[28509d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_Weight
</UL>
<BR>[Called By]<UL><LI><a href="#[2850a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiSentEventPoll
</UL>

<P><STRONG><a name="[1aca124]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[1ac9e54]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, system_m051series.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[27d2380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[2850520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1aca160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[27d32bc]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_m051series.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(.text)
</UL>
<P><STRONG><a name="[27d62c8]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, timer.o(i.TIMER_GetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[28503f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac5f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[1ac5f0c]"></a>TIMER_Open</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, timer.o(i.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[27d62c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[2850520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac5f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[27cedd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortTimersInit
</UL>

<P><STRONG><a name="[1ac5ffc]"></a>TMR1_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, porttimer.o(i.TMR1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR1_IRQHandler &rArr; prvvTIMERExpiredISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac6308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvTIMERExpiredISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27cef78]"></a>TMR2_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, uart3th.o(i.TMR2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TMR2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[27cee4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortTimersDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[1ac75c8]"></a>UART0_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, portserial.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_IRQHandler &rArr; prvvUARTTxReadyISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac7d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvUARTTxReadyISR
<LI><a href="#[1ac7d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvUARTRxISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27cef3c]"></a>UART1_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, uart3th.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[27cee10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortTimersEnable
<LI><a href="#[27cef00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialGetByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[1ac9e18]"></a>UART_Open</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, uart.o(i.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[27d4810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[2850520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac74d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[27ceec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[27d4234]"></a>UART_Write</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uart.o(i.UART_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2850ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConnectNetMode
<LI><a href="#[2850b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData2Sever
</UL>

<P><STRONG><a name="[1ac9ddc]"></a>Uart3ThInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, uart3th.o(i.Uart3ThInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Uart3ThInit &rArr; WifiInit &rArr; x3THPortSerialInit &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[27ced98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1aca0ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2850afc]"></a>UpdataWeight</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, esp8266_wifi.o(i.UpdataWeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpdataWeight &rArr; CleanWeight &rArr; ReadADCHX711
</UL>
<BR>[Calls]<UL><LI><a href="#[2850bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanWeight
</UL>
<BR>[Called By]<UL><LI><a href="#[28509d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_Weight
</UL>

<P><STRONG><a name="[2850ac0]"></a>WifiConnectNetMode</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, esp8266_wifi.o(i.WifiConnectNetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WifiConnectNetMode &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[27d4234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2850a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiSentEventPoll
</UL>

<P><STRONG><a name="[27ced98]"></a>WifiInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, esp8266_wifi.o(i.WifiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = WifiInit &rArr; x3THPortSerialInit &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1aca1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Delay
<LI><a href="#[27cedd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortTimersInit
<LI><a href="#[27ceec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
<LI><a href="#[2850bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigHWADCHX711
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac9ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3ThInit
</UL>

<P><STRONG><a name="[1ac9da0]"></a>WifiMain</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, esp8266_wifi.o(i.WifiMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = WifiMain &rArr; WifiSentEventPoll &rArr; SendData2Sever &rArr; rt_thread_entry_Weight &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1aca1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Delay
<LI><a href="#[2850a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiSentEventPoll
<LI><a href="#[2850a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiReciveEventPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[1aca0ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2850a84]"></a>WifiReciveEventPoll</STRONG> (Thumb, 428 bytes, Stack size 8 bytes, esp8266_wifi.o(i.WifiReciveEventPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WifiReciveEventPoll &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[1aca1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Delay
<LI><a href="#[28502c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[2850430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac9da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiMain
</UL>

<P><STRONG><a name="[2850a48]"></a>WifiSentEventPoll</STRONG> (Thumb, 334 bytes, Stack size 8 bytes, esp8266_wifi.o(i.WifiSentEventPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = WifiSentEventPoll &rArr; SendData2Sever &rArr; rt_thread_entry_Weight &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1aca1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Delay
<LI><a href="#[2850ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConnectNetMode
<LI><a href="#[2850b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData2Sever
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac9da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiMain
</UL>

<P><STRONG><a name="[276e004]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mb.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac9cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[27d0d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealyCtrl
</UL>

<P><STRONG><a name="[284e2ac]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[284e270]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[284e234]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1ac45f8]"></a>crc_ccitt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mbcrc.o(i.crc_ccitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crc_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac2b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
</UL>

<P><STRONG><a name="[2850a0c]"></a>delayp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, esp8266_wifi.o(i.delayp))
<BR><BR>[Called By]<UL><LI><a href="#[2850b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADCHX711
</UL>

<P><STRONG><a name="[1ac230c]"></a>eBTFuncReadHoldingRegister</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, btfunc.o(i.eBTFuncReadHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eBTFuncReadHoldingRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac22d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1ac9d64]"></a>eMBEnable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mb.o(i.eMBEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1aca0ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ac1c7c]"></a>eMBFuncReadCoils</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, mbfunccoils.o(i.eMBFuncReadCoils))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = eMBFuncReadCoils &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac22d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1ac4db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1ac1790]"></a>eMBFuncReadDiscreteInputs</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, mbfuncdisc.o(i.eMBFuncReadDiscreteInputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = eMBFuncReadDiscreteInputs &rArr; eMBRegDiscreteCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac22d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1ac4d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1ac0fd4]"></a>eMBFuncReadHoldingRegister</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, mbfuncholding.o(i.eMBFuncReadHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = eMBFuncReadHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac22d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1ac4d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1ac0b9c]"></a>eMBFuncReadInputRegister</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, mbfuncinput.o(i.eMBFuncReadInputRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = eMBFuncReadInputRegister &rArr; eMBRegInputCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac22d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1ac4d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegInputCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1ac0f98]"></a>eMBFuncReadWriteMultipleHoldingRegister</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, mbfuncholding.o(i.eMBFuncReadWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eMBFuncReadWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac22d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1ac4d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1ac02f0]"></a>eMBFuncReportSlaveID</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mbfuncother.o(i.eMBFuncReportSlaveID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBFuncReportSlaveID
</UL>
<BR>[Calls]<UL><LI><a href="#[2850430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1ac1c40]"></a>eMBFuncWriteCoil</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, mbfunccoils.o(i.eMBFuncWriteCoil))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = eMBFuncWriteCoil &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac22d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1ac4db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1ac0f5c]"></a>eMBFuncWriteHoldingRegister</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mbfuncholding.o(i.eMBFuncWriteHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eMBFuncWriteHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac22d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1ac4d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1ac1c04]"></a>eMBFuncWriteMultipleCoils</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, mbfunccoils.o(i.eMBFuncWriteMultipleCoils))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = eMBFuncWriteMultipleCoils &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac22d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1ac4db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1ac0f20]"></a>eMBFuncWriteMultipleHoldingRegister</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, mbfuncholding.o(i.eMBFuncWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = eMBFuncWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac22d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1ac4d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1ac9d28]"></a>eMBInit</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, mb.o(i.eMBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac2c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[1ac8d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1aca0ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ac9cec]"></a>eMBPoll</STRONG> (Thumb, 522 bytes, Stack size 16 bytes, mb.o(i.eMBPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBPoll &rArr; peBTFrameSendCur &rArr; crc_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac2b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
<LI><a href="#[1ac8cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[1ac8d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventGet
<LI><a href="#[276e004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1aca0ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ac2c6c]"></a>eMBRTUInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mbrtu.o(i.eMBRTUInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = eMBRTUInit &rArr; xMBPortSerialInit &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac5f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[1ac74d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[1ac96d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1ac9710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
<LI><a href="#[2850520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac9d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[1ac2c30]"></a>eMBRTUReceive</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, mbrtu.o(i.eMBRTUReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBRTUReceive &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac45bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[1ac96d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1ac9710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[1ac2bf4]"></a>eMBRTUSend</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, mbrtu.o(i.eMBRTUSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBRTUSend &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac45bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[1ac7550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[1ac96d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1ac9710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[1ac2bb8]"></a>eMBRTUStart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mbrtu.o(i.eMBRTUStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBRTUStart &rArr; vMBPortTimersEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac5f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[1ac7550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[1ac96d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1ac9710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[1ac2b7c]"></a>eMBRTUStop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mbrtu.o(i.eMBRTUStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBRTUStop
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac5fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[1ac7550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[1ac96d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1ac9710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[1ac4db4]"></a>eMBRegCoilsCB</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, user_mb_app.o(i.eMBRegCoilsCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac4c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilSetBits
<LI><a href="#[1ac4c4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilGetBits
<LI><a href="#[1ac4c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterGetCBRunInMasterMode
<LI><a href="#[1ac4cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetDestAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac1c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleCoils
<LI><a href="#[1ac1c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteCoil
<LI><a href="#[1ac1c7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadCoils
</UL>

<P><STRONG><a name="[1ac4d78]"></a>eMBRegDiscreteCB</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, user_mb_app.o(i.eMBRegDiscreteCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = eMBRegDiscreteCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac4c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilSetBits
<LI><a href="#[1ac4c4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilGetBits
<LI><a href="#[1ac4c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterGetCBRunInMasterMode
<LI><a href="#[1ac4cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetDestAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac1790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadDiscreteInputs
</UL>

<P><STRONG><a name="[1ac4d3c]"></a>eMBRegHoldingCB</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, user_mb_app.o(i.eMBRegHoldingCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac4c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterGetCBRunInMasterMode
<LI><a href="#[1ac4cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetDestAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac0f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[1ac0f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[1ac0f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[1ac0fd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
</UL>

<P><STRONG><a name="[1ac4d00]"></a>eMBRegInputCB</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, user_mb_app.o(i.eMBRegInputCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eMBRegInputCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac4c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterGetCBRunInMasterMode
<LI><a href="#[1ac4cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetDestAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac0b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadInputRegister
</UL>

<P><STRONG><a name="[1aca0ac]"></a>main</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = main &rArr; eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac9cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[1ac9d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
<LI><a href="#[1ac9d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
<LI><a href="#[1ac9da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiMain
<LI><a href="#[1ac9ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3ThInit
<LI><a href="#[1ac9ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealyPoll
<LI><a href="#[1ac9f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPool
<LI><a href="#[1ac9f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWRealyInit
<LI><a href="#[1ac9f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHwAddrIint
<LI><a href="#[1ac9fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[1ac9ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[1aca160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[1accb90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadUID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[1ac2b40]"></a>peBTFrameSendCur</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, mbrtu.o(i.peBTFrameSendCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = peBTFrameSendCur &rArr; crc_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac45f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_ccitt
<LI><a href="#[1ac7550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[1ac96d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1ac9710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
<LI><a href="#[2850430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac9cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[1ac22d0]"></a>prveMBError2Exception</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mbutils.o(i.prveMBError2Exception))
<BR><BR>[Called By]<UL><LI><a href="#[1ac0b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadInputRegister
<LI><a href="#[1ac0f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[1ac0f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[1ac0f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[1ac0fd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
<LI><a href="#[1ac1790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadDiscreteInputs
<LI><a href="#[1ac1c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleCoils
<LI><a href="#[1ac1c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteCoil
<LI><a href="#[1ac1c7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadCoils
<LI><a href="#[1ac230c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eBTFuncReadHoldingRegister
</UL>

<P><STRONG><a name="[28509d0]"></a>rt_thread_entry_Weight</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, esp8266_wifi.o(i.rt_thread_entry_Weight))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_thread_entry_Weight &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2850958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2850994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2850afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataWeight
<LI><a href="#[2850b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADCHX711
<LI><a href="#[2853694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2850b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData2Sever
</UL>

<P><STRONG><a name="[1ac4cc4]"></a>ucMBMasterGetDestAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, user_mb_app.o(i.ucMBMasterGetDestAddress))
<BR><BR>[Called By]<UL><LI><a href="#[1ac4d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegInputCB
<LI><a href="#[1ac4d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
<LI><a href="#[1ac4d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[1ac4db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>

<P><STRONG><a name="[1ac45bc]"></a>usMBCRC16</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mbcrc.o(i.usMBCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usMBCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac2bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[1ac2c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
</UL>

<P><STRONG><a name="[1ac7550]"></a>vMBPortSerialEnable</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, portserial.o(i.vMBPortSerialEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1ac2a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[1ac2b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
<LI><a href="#[1ac2b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[1ac2bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[1ac2bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
</UL>

<P><STRONG><a name="[1ac5fc0]"></a>vMBPortTimersDisable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, porttimer.o(i.vMBPortTimersDisable))
<BR><BR>[Called By]<UL><LI><a href="#[1ac2ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
<LI><a href="#[1ac2b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
</UL>

<P><STRONG><a name="[1ac5f84]"></a>vMBPortTimersEnable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, porttimer.o(i.vMBPortTimersEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vMBPortTimersEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac6344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Start
<LI><a href="#[1ac6380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
<LI><a href="#[1ac63f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac2b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
<LI><a href="#[1ac2bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
</UL>

<P><STRONG><a name="[27cef00]"></a>x3THPortSerialGetByte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart3th.o(i.x3THPortSerialGetByte))
<BR><BR>[Called By]<UL><LI><a href="#[27cef3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[27ceec4]"></a>x3THPortSerialInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, uart3th.o(i.x3THPortSerialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = x3THPortSerialInit &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac7424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[1ac7460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[1ac96d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1ac9710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
<LI><a href="#[1ac9e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[1ac9e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[27cf608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[27cf644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[27ced98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiInit
</UL>

<P><STRONG><a name="[27cee4c]"></a>x3THPortTimersDisable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart3th.o(i.x3THPortTimersDisable))
<BR><BR>[Called By]<UL><LI><a href="#[27cef78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_IRQHandler
</UL>

<P><STRONG><a name="[27cee10]"></a>x3THPortTimersEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart3th.o(i.x3THPortTimersEnable))
<BR><BR>[Called By]<UL><LI><a href="#[27cef3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[27cedd4]"></a>x3THPortTimersInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, uart3th.o(i.x3THPortTimersInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = x3THPortTimersInit &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac5f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[27cf608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[27cf644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[27ced98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiInit
</UL>

<P><STRONG><a name="[1ac4c88]"></a>xMBMasterGetCBRunInMasterMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, user_mb_app.o(i.xMBMasterGetCBRunInMasterMode))
<BR><BR>[Called By]<UL><LI><a href="#[1ac4d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegInputCB
<LI><a href="#[1ac4d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
<LI><a href="#[1ac4d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[1ac4db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>

<P><STRONG><a name="[1ac8d74]"></a>xMBPortEventGet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventGet))
<BR><BR>[Called By]<UL><LI><a href="#[1ac9cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[1ac8d38]"></a>xMBPortEventInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ac9d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[1ac8cfc]"></a>xMBPortEventPost</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventPost))
<BR><BR>[Called By]<UL><LI><a href="#[1ac2a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[1ac2ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
<LI><a href="#[1ac9cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[1ac7514]"></a>xMBPortSerialGetByte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, portserial.o(i.xMBPortSerialGetByte))
<BR><BR>[Called By]<UL><LI><a href="#[1ac2b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
</UL>

<P><STRONG><a name="[1ac74d8]"></a>xMBPortSerialInit</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, portserial.o(i.xMBPortSerialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = xMBPortSerialInit &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac7424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[1ac7460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[1ac7dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1ac96d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1ac9710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
<LI><a href="#[1ac9e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[1ac9e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac2c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[1ac749c]"></a>xMBPortSerialPutByte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portserial.o(i.xMBPortSerialPutByte))
<BR><BR>[Called By]<UL><LI><a href="#[1ac2a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
</UL>

<P><STRONG><a name="[1ac5f48]"></a>xMBPortTimersInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, porttimer.o(i.xMBPortTimersInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xMBPortTimersInit &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac5f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[1ac6344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Start
<LI><a href="#[1ac6380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
<LI><a href="#[1ac63bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1ac63f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac2c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[1ac2b04]"></a>xMBRTUReceiveFSM</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, mbrtu.o(i.xMBRTUReceiveFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xMBRTUReceiveFSM &rArr; vMBPortTimersEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac5f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[1ac7514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialGetByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[1ac2ac8]"></a>xMBRTUTimerT35Expired</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mbrtu.o(i.xMBRTUTimerT35Expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xMBRTUTimerT35Expired
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac5fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[1ac8cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[1ac2a8c]"></a>xMBRTUTransmitFSM</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, mbrtu.o(i.xMBRTUTransmitFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xMBRTUTransmitFSM
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac749c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialPutByte
<LI><a href="#[1ac7550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[1ac8cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[1ac4c4c]"></a>xMBUtilGetBits</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, mbutils.o(i.xMBUtilGetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = xMBUtilGetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac4d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[1ac4db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>

<P><STRONG><a name="[1ac4c10]"></a>xMBUtilSetBits</STRONG> (Thumb, 80 bytes, Stack size 44 bytes, mbutils.o(i.xMBUtilSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xMBUtilSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac4d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[1ac4db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1accb90]"></a>FMC_ReadUID</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.FMC_ReadUID))
<BR><BR>[Called By]<UL><LI><a href="#[1aca0ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ac7dc0]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, portserial.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac74d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[1ac7d84]"></a>prvvUARTRxISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, portserial.o(i.prvvUARTRxISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvUARTRxISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac75c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[1ac7d48]"></a>prvvUARTTxReadyISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, portserial.o(i.prvvUARTTxReadyISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvUARTTxReadyISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac75c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[1ac63f8]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, porttimer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1ac5f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[1ac5f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>

<P><STRONG><a name="[1ac63bc]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, porttimer.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac5f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>

<P><STRONG><a name="[1ac6380]"></a>TIMER_EnableInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, porttimer.o(i.TIMER_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[1ac5f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[1ac5f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>

<P><STRONG><a name="[1ac6344]"></a>TIMER_Start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, porttimer.o(i.TIMER_Start))
<BR><BR>[Called By]<UL><LI><a href="#[1ac5f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[1ac5f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>

<P><STRONG><a name="[1ac6308]"></a>prvvTIMERExpiredISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, porttimer.o(i.prvvTIMERExpiredISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvTIMERExpiredISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac5ffc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>

<P><STRONG><a name="[27d4810]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, uart.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2850520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac9e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[27d33e8]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[27d2380]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, system_m051series.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2850520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac9e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[27cf644]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart3th.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[27cedd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortTimersInit
<LI><a href="#[27ceec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[27cf608]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, uart3th.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[27cedd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortTimersInit
<LI><a href="#[27ceec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
